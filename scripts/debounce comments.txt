/**
 * Allows debounce functionality
 * @param {function} fn: a function which should be executed infrequently
 * @param {number} time: @param fn will be called only after time == @param time has passed after last call
 * @param {any=} obj used to check whether the value has changed and execute @param fn only when @param cmpFn
 * returns false
 * @param {function=} cmpFn: a function used for comparing. It should have 2 parameters which can be then used
 * to perform a comparison. if @param obj is provided but @param cmpFn is not, a default === comparison function will
 * be used instead.
 */
 /**
     * compare @param obj with val using @param cmpFn and if value returned is false,
     * update this.changed and return the class object which then allows a call to debounce or func
     * which in effect, will only run when the value has changed.
     * When the value does change, this.obj is updated to @param val
     * @param {any} val: the value which will be compared with this.obj
     * @return {this} returns the class object
     */

    /**
     * allow debounce or func to run irrespective of whether or not this.obj changed
     */
     /**
     * immediately execute this.fn without any debounce if change has occured
     * @param  {...any} args will be supplied to the function if it is executed
     * @return {any} returns the return value given by this.fn
     */
     /**
     * when a call to debounce is made, this.fn provided is executed iff:
     * 1. after timeout, this particular call to debounce is the last call to debounce, and
     * 2. either this.obj was not give, or this.changed is true from compare function or force property
     * @param  {...any} args will be supplied to the function if it is executed
     * @return {any} returns the return value given by this.fn
     */